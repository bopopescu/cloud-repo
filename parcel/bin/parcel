#!/usr/bin/env python
from parcel import (
    HTTPClient,
    UDTClient,
    const,
    defaults,
    manifest,
    version_string)
from parcel.log import get_logger

import argparse
import logging

logging.root.setLevel(logging.INFO)
log = get_logger('parcel_client')


def get_client(args, token, **_kwargs):
    kwargs = dict(
        token=token,
        n_procs=args.n_processes,
        directory=args.dir,
        segment_md5sums=args.segment_md5sums,
        debug=args.debug,
        http_chunk_size=args.http_chunk_size,
        save_interval=args.save_interval,
    )

    if args.udt:
        server = args.server or defaults.udt_url
        return UDTClient(
            proxy_host=args.proxy_host,
            proxy_port=args.proxy_port,
            remote_uri=server,
            external_proxy=args.external_proxy,
            **kwargs
        )
    else:
        server = args.server or defaults.tcp_url
        return HTTPClient(
            uri=server,
            **kwargs
        )


def run_non_interactive(parser):
    args = parser.parse_args()
    if args.version:
        print(version_string)
        return

    client = get_client(args, args.token)

    if args.verbose:
        logging.root.setLevel(logging.DEBUG)

    # Create file list and remove duplicates
    file_ids = set([f['id'] for f in args.manifest] + args.file_ids)
    log.info(version_string.replace('\n', ' - '))
    client.download_files(file_ids)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=('Download files using HTTP/S over TCP or UDT.  '
                     'Run without arguments to run interactively.'))
    parser = argparse.ArgumentParser()

    #############################################################
    #                     General options
    #############################################################
    parser.add_argument('--version', action='store_true')
    parser.add_argument('-m', '--manifest',
                        type=manifest.argparse_type,
                        default=list(),
                        help='GDC Download manifest file.')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='verbose logging')
    parser.add_argument('-d', '--dir',
                        default=None,
                        help='Directory to download files to. '
                        'Defaults to current dir')
    parser.add_argument('-s', '--server', metavar='server', type=str,
                        default=None,
                        help='The parcel server udt address server[:port]')
    parser.add_argument('file_ids', metavar='file_id', type=str,
                        nargs='*', help='uuids to download')
    parser.add_argument('--no-segment-md5sums', dest='segment_md5sums',
                        action='store_false',
                        help='Calculate inbound segment md5sums and/or verify md5sums on restart')
    parser.add_argument('--debug', dest='debug',
                        action='store_true',
                        help='Print stack traces')
    parser.add_argument('-n', '--n-processes', type=int,
                        default=defaults.processes,
                        help='Number of client connections.')
    parser.add_argument('--http-chunk-size', type=int,
                        default=const.HTTP_CHUNK_SIZE,
                        help='Size in bytes of standard HTTP block size.')
    parser.add_argument('--save-interval', type=int,
                        default=const.SAVE_INTERVAL,
                        help='The number of chunks after which to flush state file. A lower save interval will result in more frequent printout but lower performance.')

    token_args = parser.add_mutually_exclusive_group(required=False)
    token_args.add_argument('-t', '--token-file',
                            type=lambda x: argparse.FileType('r')(x).read(),
                            dest='token',
                            help='authentication token file')
    token_args.add_argument('-T', '--token', default='', type=str,
                            dest='token', help='authentication token')

    #############################################################
    #                       UDT options
    #############################################################

    # udt = subparsers.add_parser(UDT, help='Download files via UDT',
    #                             parents=[parser])

    parser.add_argument('-u', '--udt', action='store_true',
                        help='Use the UDT protocol.  Better for WAN connections')
    parser.add_argument('-H', '--proxy-host', default=defaults.proxy_host,
                        type=str, dest='proxy_host',
                        help='The port to bind the local proxy to')
    parser.add_argument('-P', '--proxy-port', default=defaults.proxy_port,
                        type=str, dest='proxy_port',
                        help='The port to bind the local proxy to')
    parser.add_argument('-e', '--external-proxy', action='store_true',
                        dest='external_proxy',
                        help='Do not create a local proxy but bind to an external one')

    #############################################################
    #                       Start client
    #############################################################

    run_non_interactive(parser)
